//*1.	socket(AF_INET, SOCK_STREAM, 0);
    AF_INET specifies usage IPv4 protocol family
    SOCK_STREAM it defines that the socket is TCP type
    0 will choose default protocol (some options: IPPROTO_TCP (int 6), IPPROTO_UDP (17), IPPROTO_ICMP(1)-Internet Control Message Protocol (ICMP), typically with SOCK_RAW)

//*2.	setsockopt(_head_socket, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(&opt));
    head_socket - server socket
    opt - void* bcs for other second param option this can be either (int* or struct linger*)
    To manipulate options at the sockets API level, level is specified as SOL_SOCKET
//? SO_REUSEADDR - allows to restart/run server fast. ->
    After closing socket, OS keeps the port reserved for ~ 2–4 min.
    - A server with active client connections can be restarted and can bind to its port without 
    having to close all of the client connections

//*3 fcntl(fd, cmd_type, ...optional_arg) - usage, modes and so on.
Configures file descriptor properties.
In project usage:  Sets non-blocking for sockets. 
F_SETFL - set some fd's property mode/flag
flag: O_NONBLOCK - A non-blocking socket doesn’t wait (or "block") if there's nothing to read or write.
    Instead, it immediately returns an error like EAGAIN or EWOULDBLOCK.
//?Useful for servers handling multiple clients at once, so one slow client doesn’t freeze the whole system.
if sending client is slow/not-connected - err returned.
if recieving client is slow/not-connected monitor:
    store msg in buffer of sender. + wait-when recieving client is available for write() into, again;

//*4.	sockaddr_in - struct describing sock addr (in) - for internet IPv4
//? servAddr.sin_addr.s_addr = INADDR_ANY is equal to: 
//? inet_pton(servSockListen, AF_INET, "0.0.0.0", &servAddr.sin_addr);
//? htonl(INADDR_ANY) - does the same as prev line, just other variant.
both in prev line says that: 
    inet_pton: Converts the human-readable IP address "0.0.0.0" into a binary and stores it in servAddr.sin_addr
        "0.0.0.0" is a special address that tells the socket to bind to all available network interfaces on the host machine.
        This means the socket will accept connections from any IP addr.
//?*memset and sockaddr_in.sin_zero
memset - fills servAddr struct with '0' chars. 
bcs of servAddr.sin_zero (which is 8 byte len) added to broaden the struct len, to backwards compatability with sockaddr struct where data field is longer

//*5.	htons() - host to network short. computer to-> network order of bytes changed
use this bcs of big/little endian and differences in computer and network order of bytes reading in nums
That fn will change it depending on whatever type of machine it is in,
there is also ntohs() backwards fn to transform, is used later.
//? 6667 standard IRC PORT. to avoid need of root priviliges 
    0–1023 (Well-Known Ports): Reserved for system and well-known services (e.g., HTTP on port 80, SSH on port 22). 
You generally cannot use these without superuser privileges.
    1024–49151 (Registered Ports): These ports are registered for specific services but can also be used by applications.
    9152–65535 (Dynamic/Private Ports): These are typically used for temporary or dynamic allocations by OS.
Choosing a port in this range minimizes the risk of conflicts with known services.

//*           cast from sockaddr_in
//*bind(_head_socket, (sockaddr*)&_addr, sizeof(_addr))
binds socket fd to _addr and pass it's size to reserve amnt of memory for it.

//# next line available since C++11, fuck...
//#6 aggregate initialization (initialization of all members of struct at once, IN THE SAME ORDER AS THEY SPEICFIED)
//? ex:
//*6 struct pollfd {
    int     fd;       //first member
    short   events;  //second member
    short   revents; //third member
}
//? usage with aggregate init.
pollfd serv_pollfd = {_head_socket, POLLIN, 0};
so no need to assign each member with direct access like: serv_pollfd.fd = _head_socket and so on with each.
//*6.1 pollfd
When you initialize or reset a pollfd structure, the revents field should be cleared (set to 0)
because it will be overwritten by the system when poll() is invoked (to POLLIN/POLLOUT/POLLERR) - the real event that will happen.
//?The revents field is a bitmask that indicates the events that occurred for a file descriptor.
Multiple events can occur at the same time (e.g., POLLIN, POLLOUT, POLLHUP), and they are stored as separate bits in the revents integer.
POLLOUT - almost always is this revent, as it says that server has space to pass the data(write into OUT)

//*7 poll(_pollfds.data(), _pollfds.size(), 1000);
First param: poll work with direct pointer to data storage, not with vector, so we pass the pointer to data array stored in vector container.
Third param: timeout in milliseconds that poll() should block waiting for a file descriptor to become ready.
//?    The call will block until either:
    •  a file descriptor becomes ready;
    •  the call is interrupted by a signal handler; or
    •  the timeout expires.
//? return: num of elems in arr that has revents set to nonzero.

//*8 inet_ntoa(struct in_addr in) converts the Internet host address in, given in network byte order, to a string in IPv4 dotted-decimal notation.
//? in_addr has just one member - address in byte order. It's a struct just as an adapter

//*9 sig_atomic_t
It’s a small integer type guaranteed to be read/written in one atomic CPU operation
even in the presence of asynchronous interrupts made by signals.
So if a signal interrupts your code while that variable is being changed,
you won’t get a half-written or corrupted value.
//*volatile - (нестабільний)
//* https://medium.com/@pauljlucas/what-volatile-does-in-c-and-c-d6e9924b15c7
To tell the compiler that objects qualified with volatile may either be modified
or cause side effects in ways unknown to the compiler; therefore, not to optimize
away accesses to such objects nor reorder their accesses with respect to other
operations that have visible side effects.


//! write about std::runtime_error and STDEXCEPT
//! write about std::exception catching by ref std::exception &e
//! wirte about listen

//#MAP container: syntax and available stuff
//?_clients[client_sock] = Client(client_sock, client);
this syntax looks cool, but here you create(as operator[] creates new elem, when doesn't find
elem by the key in the map. But IF already EXIST - it write/overwrite actually in the existing elem value).
And after one more step is to copy assign inplace constructed Client
inside (as we use obj, not pointer in value);
//since C++11 there is ability to create direct, avoiding temporary obj Client:
_clients.emplace(client_sock, Client(client_sock));
//? so better do: _clients.insert(std::make_pair(client_sock, Client(client_sock, client)));
//or directly make pair: syntax: _clients.insert(std::pair<int, Client>(client_sock, Client(client_sock)));
insert work with the whole pair (key, value), so we need to std::make_pair().
//? direct operator{} syntax since C++11: _clients.insert({client_sock, Client(client_sock, client)});